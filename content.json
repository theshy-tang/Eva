{"meta":{"title":"安得广厦千万间，大庇天下寒士俱欢颜","subtitle":"","description":"第一个博客","author":"TangYongao","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2022-10-12T09:06:04.975Z","updated":"2022-10-12T09:06:04.975Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有分类","date":"2022-10-11T09:46:21.116Z","updated":"2022-10-11T09:46:21.116Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2022-10-11T09:37:35.032Z","updated":"2022-10-11T09:37:35.032Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2022-10-11T12:01:34.294Z","updated":"2022-10-11T12:01:34.294Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"}],"posts":[{"title":"","slug":"MySql","date":"2022-11-16T10:25:53.109Z","updated":"2022-11-16T10:24:02.915Z","comments":true,"path":"2022/11/16/MySql/","link":"","permalink":"http://example.com/2022/11/16/MySql/","excerpt":"","text":"MySql1：SQL语句可以单行或多行书写，以分号结尾。2.MySQL数据库的SQL语句不区分大小写，关键字建议使用大写3.注释单行注释：– 注释内容或#注释内容（MySQL特有)(– 后面的注释需要先空一格子，否则报错)·多行注释：&#x2F;*星号 内容 星号*&#x2F; MySql的基本操作：1mysql -uroot -p1234//在控制台输入 123456789101112131415161718show databases;//查询所有的数据库CREATE DATABASE IF NOT EXISTS 数据库名称；//创建数据库（判断，如果不存在则创建)create database db1//创建数据库，不能创建同名的数据库DROP DATABASE IF EXISTS 数据库名称 //删除数据库(判断，如果存在则删除)drop database da1//删除数据库use db1;//使用数据库select database();//查看使用的数据库show tables;//显示所有的表desc 表名；//查询表的结构；create table 表名(变量名 类型，.....,.....,.....//最后不要加，);//创建表drop table 表名;//删除表drop table if exists 表名；删除表时判断表是否存在 删除操作：12345678910修改表名alter table 表名 rename to 新表名；添加一列alter table 表名 add 列名 数据类型；修改数据类型alter table 表名 modify 列名 新的数据类型；修改列名和数据类型alter table 表名 change 列名 新列名 新的数据类型删除列alter table 表名 drop 列名； MySql数据的基本类型： 添加数据：12345671.给指定列添加数据insert into 表名(列名1，列名2,...)values(值1.值2，..); 2.给全部列添加数据INSERT INTO 表名VALUES（值1，值2，..）3.批量添加数据INSERT INTO 表名（列名1，列名2，.）VALUES（值1，值2，），（值1，值2，.），（值1，值2，.）INSERT INTO 表名 VALUES（值1，值2...），（值1，值2，.），（值1，值2，..）.. 修改数据：121.修改表数据UPDATE表名SET列名1=值1，列名2=值2，[where条件]//如果没有加whee,则表中的所有数据都会被修改 删除语法：121.删除数据DELETE FROM 表名WHERE [where条件]//如果没有加whee,则表中的所有数据都会被删除 查询:1234567891.查询多个字段SELECT 字段列表 FROM 表名：SELECT*FROM 表名：--查询所有数据-- 查询去除重复记录select distinct 字段列表 from 表名;-- 起别名AS: AS 也可以忽略，但是列名和别名之间必须空一格select name,math as 数学成绩,english as 英语成绩 from stu; 条件查询：1select 字段列表 from 表名 where 条件列表； 条件： 12345678910111213141516171819202122232425262728293031323334353637 -- 年龄大于20select *from stu WHERE age &gt; 20; -- 年龄大于20等于20select *from stu WHERE age &gt;= 20; -- -3.查询年龄大于等于20岁并且年龄小于等于30岁的学员信息select *from stu WHERE age &gt;= 20 &amp;&amp; age&lt;= 30;select *from stu WHERE age &gt;= 20 and age&lt;= 30;select *from stu WHERE age BETWEEN 20 and 30; -- 查询入学日期在&#x27;1998-09-01&#x27;到&#x27;1999-09-01&#x27;的信息 select *FROM stu where hire_date BETWEEN &#x27;1998-09-01&#x27; AND&#x27;1999-09-01&#x27;; -- 5.香询年龄等于18岁的学员信息select *from stu WHERE age = 18;-- 6.查询年龄不等于18岁的学员信息select *from stu WHERE age != 18;select *from stu WHERE age &lt;&gt; 18;-- 7：查询年龄等于18岁或者年龄等于20岁或者年龄等于22岁的学员信息select *from stu WHERE age = 18 or age = 20 or age = 22;select *from stu WHERE age in (18,20,22);-- 8：查询英语成绩为nul1的学员信息-- 注意：null 值得比较不能使用= !=，要使用is，is not;select *from stu WHERE english = null;-- 不可以select *from stu WHERE english is null;select *from stu WHERE english is not null;-- 模糊查询：/*通配符：（1）：代表单个任意字符（2）：%代表任意个数字符*/-- 1。查询姓&#x27;马&#x27;的学员信息select *from stu WHERE name like &#x27;马%&#x27;;-- 查询第二字是花的select *from stu WHERE name like &#x27;_花%&#x27;;-- 查询名字中包含&#x27;德&#x27;的信息select *from stu WHERE name like &#x27;%德%&#x27;; 分组查询：1234567891011SELECT字段列表FROM表名ORDERBY排序字段名1[排序方式1]，排序字段名2[排序方式2]...;排序方式：·ASC：升序排列（默认值）·DESC:降序排列-- 1查询学生信息，按照年龄升序排列select *from stu ORDER BY age ASC;-- 2.香询学生信息，按照数学成绩降序排列select *from stu ORDER BY math desc;-- 3.查询学生信息，按照数学成绩降序排列，如果数学成绩一样，再按照英语成绩升序非列select *from stu ORDER BY math desc,english asc; 分组查询：聚合函数的分类： 函数名 功能 count（列名） 统计数量（一般选用不为null的列） max（列名） 最大值 min（列名） 最小值 sum(列名) 求和 avg（列名） 平均值 1234567891011121·统计班级共有多少个学生select count(id) from stu;-- count统计数不能为null; 2．查询数学成绩的最高分select max(math) from stu;03.查询数学成绩的最低分select min(math) from stu;4查询效学成绩的总分select max(math) from stu;5，查询数学成绩的平均分select sum(math) from stu;6，查询英语成绩的最低分select min(english) from stu;-- null值不参与聚合函数的运算 分组查询语法：123456789101112131415161.分组查询语法SELECT 字段列表FROM 表名[WHERE 分组前条件限定]GROUP BY分组字段名[HAVING分组后条件过滤]注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义where和having区别：- 执行时机不一样：where是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤。- 可判断的条件不一样：where不能对聚合函数进行判断，having可以执行顺序 where &gt; 聚合函数 &gt;having-- 1.查询男同学和女间学各自的数学平均分select sex,avg(math)from stu GROUP BY sex;-- 2。查询男同学和女同学各自的数学平均分，以及各自人数select sex,count(sex),avg(math)from stu GROUP BY sex;select sex,count(*),avg(math)from stu GROUP BY sex;-- 3.查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组select sex,count(*),avg(math)from stu where math &gt;70 GROUP BY sex;- 4．查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组，分组之后人数大于2select sex,count(*),avg(math)from stu where math &gt;70 GROUP BY sex having count(*)&gt;2; 分页查询：123456789101112131415/*分页查询：SELECT 字段列表 FROM 表名 LIMIT起始索引,查询条目数*起始索引：从0开始 */-- 从0开始查询，查询3条数据select *from stu limit 0,3;-- 2.每页显示3条数据，查询第1页数据 select *from stu limit 0,3; -- 3：每页显示3条数据，查询第2页数据select *from stu limit 3,3;-- 4：每页显示3条数据，查询第3页数据select *from stu limit 6,3; -- 起始索引=（当前的页码 - 1）*每页显示的条数 DQL小结：1234567891011121314SELECT 字段列表FROM表名列表WHERE 条件列表GROUP BY 分组字段HAVING 分组后条件ORDER BY 排序字段LIMIT 分页限定 约束： 约束的概念 约束是作用于表中列上的规则，用于限制加入表的数据 约束的存在保证了数据库中数据的正确性、有效性和完整性 约束名称 描述 关键字 非空约束 保证列中所有的数据不能有NULL值 NOT NULL 唯一约束 保证列中所有的数各不相同 UNIQUE 主键约束 主键是一行数据的为唯一标识，要求非空且唯一 PRIMARY KEY 检查约束 保证列中的值满足某一条件 CHECK 默认约束 保存数据时，未指定值采用默认数值 DEFAULT 外键约束 外键用来土让两个表的数据之间建立链接，保证数据的一致性和完整性 FOREIGN KEY tips: MYSQL不止检查约束 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647-- 创建表时添加非空约束create table 表名(列名 数据类型 NOT NULL,...);-建完表后添加非空约束ALTER TABLE 表名 MODIFY 字段名 数据类型 NOT NULL删除约束alter table emp modify 字段名 数据类型；-- 员工表CREATE TABLE emp ( id INT PRIMARY KEY auto_increment, ename VARCHAR ( 50 ) NOT NULL UNIQUE, joindata DATE NOT NULL, salary DOUBLE ( 7, 2 ) NOT NULL, bonus DOUBLE ( 7, 2 ) DEFAULT 0 );INSERT INTO emp ( id, ename, joindate, salary, bonus )VALUES ( 1, &#x27;张三&#x27;, &#x27;1999-02-02&#x27;, 2000, 9000 );ALTER TABLE emp CHANGE joindata joindate date;-- 演示主键约束：非空且唯一INSERT INTO emp ( id, ename, joindate, salary, bonus )VALUES ( NULL, &#x27;张三&#x27;, &#x27;1999-02-02&#x27;, 2000, 9000 );INSERT INTO emp ( id, ename, joindate, salary, bonus )VALUES ( 1, &#x27;张三&#x27;, &#x27;1999-02-02&#x27;, 2000, 9000 ); -- 演示非空约束INSERT INTO emp ( id, ename, joindate, salary, bonus )VALUES ( 1, NULL, &#x27;1999-02-02&#x27;, 2000, 9000 ); -- 默认约束INSERT INTO emp ( id, ename, joindate, salary)VALUES ( 3, &#x27;王英&#x27;, &#x27;1999-02-02&#x27;, 2000);INSERT INTO emp ( id, ename, joindate, salary, bonus)VALUES ( 4, &#x27;王大英&#x27;, &#x27;1999-02-02&#x27;, 2000,NULL); SELECT *from em-- 演示自动增长:auto_increment:INsERT INTo emp（ename,joindate,salary,bonus)values（赵六&#x27;,&#x27;1999-11-11&#x27;,8800,null);INSERT INTo emp(id,ename,joindate,salary,bonus)values(null,赵六2&#x27;,1999-1l-11&#x27;,8800,null);INsERTINToemp(id,ename,joindate,salary,bonus)values(null,赵六3,1999-11-11,8800,null); 外键约束：概念：外键用来土让两个表的数据之间建立链接，保证数据的一致性和完整性 语法： 添加约束： 12345678910-- 创建时添加外键约束create table 表名(列名 数据类型，...[constraint][外键名称] foreign key(外键列名) references 主表（主列名）);-- 创建完后添加外键约束alter table 表名 add constraint 外键名称 foreign key(外键字段名称) references 主表名称(主表列名称)；-- 删除约束alter table 表名 drop foreign key(外键名称)； 123456789101112131415161718192021222324252627282930create table dept( id int not null PRIMARY KEY, dep_name varchar(20), addr varchar(20) );insert into dept(id,dep_name,addr)VALUES(1,&#x27;销售部&#x27;,&#x27;上海&#x27;);insert into dept(id,dep_name,addr)VALUES(2,&#x27;运营部&#x27;,&#x27;北京&#x27;); create table empl( id int PRIMARY key auto_increment, name varchar(20), age int , dep_id int, -- 添加外键 dep_id,关联 dept 表的id主键CONSTRAINT fk_empl_dept foreign key(dep_id) REFERENCES dept(id) );insert into empl(id,name,age,dep_id)VALUES(1,&#x27;塔0&#x27;,10,1);insert into empl(id,name,age,dep_id)VALUES(2,&#x27;塔2&#x27;,14,1);insert into empl(id,name,age,dep_id)VALUES(3,&#x27;塔2&#x27;,12,2);insert into empl(id,name,age,dep_id)VALUES(4,&#x27;塔3&#x27;,11,2);select *from empl;select *from dept;drop table dept;drop table empl; -- 删除外键alter table empl drop foreign key fk_empl_dept;-- 建表以后添加外键alter table empl add constraint fk_empl_dept foreign key(dep_id) REFERENCES dept(id);","categories":[],"tags":[]},{"title":"hexo基本命令","slug":"hexo基本命令","date":"2022-11-13T16:47:56.000Z","updated":"2022-11-13T16:53:27.249Z","comments":true,"path":"2022/11/14/hexo基本命令/","link":"","permalink":"http://example.com/2022/11/14/hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","excerpt":"","text":"生成新文章：hexonew“文章名（标点符号为英文状态）会生成在source&#x2F;posts之下本地预览命令：hexos上传命令：hexog和hexod这两个个命令执行之后，网页就会自动更新","categories":[],"tags":[{"name":"基本命令","slug":"基本命令","permalink":"http://example.com/tags/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"}]},{"title":"markdown","slug":"markdown","date":"2022-10-16T04:54:29.000Z","updated":"2022-10-16T06:02:09.676Z","comments":true,"path":"2022/10/16/markdown/","link":"","permalink":"http://example.com/2022/10/16/markdown/","excerpt":"","text":"标题title1title2title3title4title5title6段落第一段落 物华天宝人杰地灵(如果想换行，就要在段落的末尾空两个空格或与下一段落空一行都可) 第二段落闾阎扑地，钟鸣鼎食之家 第三段落 但愿人长久，千里共婵娟 字体加粗是两个*（前后各两个）包围字即可 一个星号是斜体 粗斜体就是三个星号 分隔线三个*或者三个以上的- 下划线在markdown里面并没有关于下划线的语法，但是markdown允许你插入一些基本的HTML代码，下划线语法如下： 这是下划线 列表无序 A B a b a b 有序数字加上要写的东西就可以 a b c 有序和无序可以一起使用只要在下一行空四格即可 team1 a b 2.team2 + a + b 区块大于号加上你要写的东西即可，换行就空一行即可 区块1 区块2 区块嵌套就是标题的样式差不多，就是符号换成了&gt; 1 2 1 2 3 代码用留个点包裹住代码即可，如果代码高亮就需要根据hexo的代码来实现了 1System.out.println(&quot;代码&quot;) 链接直接写tangyonao.top 有时候会识别不出直接写的链接，就&lt;链接&gt;就能识别的出来了 第二种是blog 图片 表格第二行起到识别表格的作用 表头 表头 x x x x 转义字符*这样就可以写出*，不用担心被语法识别成别的东西","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]},{"title":"java笔记","slug":"java笔记","date":"2022-10-12T08:36:01.000Z","updated":"2022-10-12T09:09:27.238Z","comments":true,"path":"2022/10/12/java笔记/","link":"","permalink":"http://example.com/2022/10/12/java%E7%AC%94%E8%AE%B0/","excerpt":"","text":"javajava的诞生Java的第一个版本是在1995 sun正式发的 java之父是詹姆斯·高斯林 （James Gosling） JDK(java Development kit Java开发工具包);JDK&#x3D; JRE+JAVA的开发工具[java,javac,javadoc,javap等] JRE(Java Runtime Environment Java 运行环境) JRE &#x3D; JVM+Java的核心类库[类] $$","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java笔记","slug":"java笔记","permalink":"http://example.com/tags/java%E7%AC%94%E8%AE%B0/"}],"author":["tangao"]},{"title":"测试12","slug":"测试12","date":"2022-10-11T08:24:06.000Z","updated":"2022-10-11T08:53:23.653Z","comments":true,"path":"2022/10/11/测试12/","link":"","permalink":"http://example.com/2022/10/11/%E6%B5%8B%E8%AF%9512/","excerpt":"","text":"注意事项：建议规范全站路径 URL 最后带一个 “&#x2F;“ 例如 “about&#x2F;“navbar: visiable: auto # always, auto logo: # choose [img] or [icon + title] img: volantis-static&#x2F;media&#x2F;org.volantis&#x2F;blog&#x2F;&#76;&#x6f;&#103;&#x6f;&#45;&#78;&#97;&#x76;&#66;&#97;&#114;&#x40;&#x33;&#120;&#x2e;&#112;&#x6e;&#x67; # https://gcore.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png icon: title: menu: - name: 博客 icon: fa-solid fa-rss url: &#x2F; - name: 分类 icon: fa-solid fa-folder-open url: categories&#x2F; - name: 标签 icon: fa-solid fa-tags url: tags&#x2F; - name: 归档 icon: fa-solid fa-archive url: archives&#x2F; - name: 友链 icon: fa-solid fa-link url: friends&#x2F; - name: 关于 icon: fa-solid fa-info-circle url: about&#x2F; search: Search… # Search bar placeholder","categories":[],"tags":[{"name":"标签1","slug":"标签1","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE1/"},{"name":"标签2","slug":"标签2","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE2/"}]},{"title":"测试","slug":"测试","date":"2022-10-11T08:23:58.000Z","updated":"2022-10-11T09:01:43.620Z","comments":true,"path":"2022/10/11/测试/","link":"","permalink":"http://example.com/2022/10/11/%E6%B5%8B%E8%AF%95/","excerpt":"","text":"打的啊打的的aDas的","categories":[],"tags":[{"name":"标签3","slug":"标签3","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE3/"},{"name":"标签5","slug":"标签5","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE5/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-10-11T00:25:24.567Z","updated":"2022-10-11T00:25:24.567Z","comments":true,"path":"2022/10/11/hello-world/","link":"","permalink":"http://example.com/2022/10/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"基本命令","slug":"基本命令","permalink":"http://example.com/tags/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"},{"name":"java笔记","slug":"java笔记","permalink":"http://example.com/tags/java%E7%AC%94%E8%AE%B0/"},{"name":"标签1","slug":"标签1","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE1/"},{"name":"标签2","slug":"标签2","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE2/"},{"name":"标签3","slug":"标签3","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE3/"},{"name":"标签5","slug":"标签5","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE5/"}]}